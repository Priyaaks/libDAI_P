/*  This file is part of libDAI - http://www.libdai.org/
 *
 *  Copyright (c) 2006-2011, The libDAI authors. All rights reserved.
 *
 *  Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
 */


#include <dai/factorgraph.h>
#include <iostream>
#include <fstream>
#include "dai/emrun.h"
#include <dai/util.h>
using namespace std;
using namespace dai;
  double unifRand()
{
    return rand()/double(RAND_MAX);
}
void seed()
{
	/*Declare variable to hold seconds on clock.*/
//	time_t seconds;
	/*Get value from system clock and place in seconds variable.*/
//	time(&seconds);
	/*Convert seconds to a unsigned integer.*/
     struct timeval time; 
     gettimeofday(&time,NULL);

     // microsecond has 1 000 000
     srand((time.tv_sec * 1000) + (time.tv_usec));
   //  rnd_seed((time.tv_sec * 1000) + (time.tv_usec / 10) );
}
int main() {
    // This example program illustrates how to construct a factorgraph
    // by means of the sprinkler network example discussed at
    // http://www.cs.ubc.ca/~murphyk/Bayes/bnintro.html

    int users =50;
    int movies = 1084;
    int latent = 10;
    Var C(0, users);  // Define binary variable Cloudy (with label 0)
    Var S(1, latent);  // Define binary variable Sprinkler (with label 1)
    Var D(2, movies);  // Define binary variable Sprinkler (with label 2)
    std::vector<double> vec;
    seed();
    // Define probability distribution for C
    Factor P_C( C );
    for(int i=0; i<users; i++)
    {
	vec.push_back(unifRand());
    }
    const double total = std::accumulate(vec.begin(), vec.end(), 0.0);
    int i1=0;
    for (double& value: vec) 
    {
 	value /= total;
    	P_C.set(i1, value);   // C = 0
	cout<<value <<endl;
	i1++;
    }
    vec.clear();

     Factor P_S_given_C( VarSet( S, C ) );
    for(int i=0; i<latent; i++)
    {
	vec.push_back(unifRand());
    }
    const double total2 = std::accumulate(vec.begin(), vec.end(), 0.0);
    int i2=0;
    for (double& value: vec) 
    {
 	value /= total2;
    	P_S_given_C.set(i2, value);   // C = 0
	cout<<value <<endl;
	i2++;
    }
    vec.clear();

    // Define conditional probability of D given S
    Factor P_D_given_S( VarSet( D, S ) );
    for(int i=0; i<movies; i++)
    {
	vec.push_back(unifRand());
    }
    const double total3 = std::accumulate(vec.begin(), vec.end(), 0.0);
    int i3=0;
    for (double& value: vec) 
    {
 	value /= total3;
    	P_D_given_S.set(i3, value);   // C = 0
	cout<<value <<endl;
	i3++;
    }
    vec.clear();

   // Build factor graph consisting of those four factors
    vector<Factor> SprinklerFactors;
    SprinklerFactors.push_back( P_C );
    SprinklerFactors.push_back( P_S_given_C );
    SprinklerFactors.push_back( P_D_given_S );
    FactorGraph SprinklerNetwork( SprinklerFactors );

    // Write factorgraph to a file
    SprinklerNetwork.WriteToFile( "Movie3Node1.fg" );
    cout << "Sprinkler network written to 3NodeBN1.fg" << endl;

    // Output some information about the factorgraph
    cout << SprinklerNetwork.nrVars() << " variables" << endl;
    cout << SprinklerNetwork.nrFactors() << " factors" << endl;

    // Calculate joint probability of all four variables
    Factor P;
    for( size_t I = 0; I < SprinklerNetwork.nrFactors(); I++ )
        P *= SprinklerNetwork.factor( I );
    // P.normalize();  // Not necessary: a Bayesian network is already normalized by definition

    // Calculate some probabilities
    /*Real denom = P.marginal( W )[1];
    cout << "P(W=1) = " << denom << endl;
    cout << "P(S=1 | W=1) = " << P.marginal( VarSet( S, W ) )[3] / denom << endl;
    cout << "P(R=1 | W=1) = " << P.marginal( VarSet( R, W ) )[3] / denom << endl;
*/
    return 0;
}

