#include <iostream>
#include <random>
#include <dai/alldai.h>
#include <iostream>
#include <fstream>
#include <string>
#include "dai/emrun.h"
#include <dai/util.h>
#include <string>
#include <sys/stat.h>
#include <time.h>
#include <sstream>
#include <string>
#include <cstdlib>
#include <boost/lexical_cast.hpp>
#include <iomanip>      // std::setprecision
using namespace std;
using namespace dai;

  double unifRand()
{
    return rand()/double(RAND_MAX);
}
void seed()
{
	/*Declare variable to hold seconds on clock.*/
//	time_t seconds;
	/*Get value from system clock and place in seconds variable.*/
//	time(&seconds);
	/*Convert seconds to a unsigned integer.*/
     struct timeval time; 
     gettimeofday(&time,NULL);

     // microsecond has 1 000 000
     srand((time.tv_sec * 1000) + (time.tv_usec));
   //  rnd_seed((time.tv_sec * 1000) + (time.tv_usec / 10) );
}
int main()
{

std::vector<double> vec;
 std::uniform_real_distribution<double> distribution(0.0,1.0);
seed();
  for (int i=0; i<10; i++) {
	vec.push_back(unifRand());
	//cout<<vec[i]<<endl;
	//++p[int(number)];
  }

const double total = std::accumulate(vec.begin(), vec.end(), 0.0);
for (double& value: vec) 
	{
 	value /= total;
	cout<<value <<endl;
	}

  return 0;
}
