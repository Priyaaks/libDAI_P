/*  This file is part of libDAI - http://www.libdai.org/
 *
 *  libDAI is licensed under the terms of the GNU General Public License version
 *  2, or (at your option) any later version. libDAI is distributed without any
 *  warranty. See the file COPYING for more details.
 *
 *  Copyright (C) 2010  Joris Mooij  [joris dot mooij at libdai dot org]
 */

#include <dai/alldai.h>
#include <iostream>
#include <fstream>
#include <string>
#include "dai/emrun.h"
#include <dai/util.h>
#include <string>
#include <sys/stat.h>
#include <time.h>

#include <iomanip>      // std::setprecision
#include <sstream>
#include <string>
#include <cstdlib>
#include <boost/lexical_cast.hpp>
using namespace std;
using namespace dai;

// GA - initialization
size_t max_gen = 25; // no. of generations
size_t population_size = 20; // population size
Real pc;// = 0.8; // crossover probability - between 0.6 an 0.9
Real pm;// = 0.3; // mutation probability - between 1/pop.size and 1/chromosome_length
int population_no=0; // current population id

// 1. Creating initial population of EM runs 
	
char* gibbsfile;// = "/home/priya/libDAI-0.3.1/alarm/500/5.tab";
//const char* gibbsfile = argv[1];
string alarmfgloc;// = "/home/priya/libDAI-0.3.1/alarm_learned_factor_graphs/"; 
string alarmlearnedfgloc;// = "/home/priya/libDAI-0.3.1/alarm_learned_factor_graphs/";
const char* networkname = "alarm";
size_t maxIters =1000; // maximum number of iterations

ofstream out;
EMRun* runname;
vector <EMRun*> layer; 
vector <EMRun*> layer_finalval;
int *arrval;
//
// Generate a random number between 0 and 1
// return a uniform number in [0,1].
double unifRand()
{
    return rand() / double(RAND_MAX);
}
// Reset the random number generator with the system clock.
void seed()
{
	/*Declare variable to hold seconds on clock.*/
//	time_t seconds;
	/*Get value from system clock and place in seconds variable.*/
//	time(&seconds);
	/*Convert seconds to a unsigned integer.*/
     struct timeval time; 
     gettimeofday(&time,NULL);

     // microsecond has 1 000 000
     srand((time.tv_sec * 1000) + (time.tv_usec / 10));
}

std::string& trim(std::string& s, const char* t = " \t\n\r\f\v")
{
	s.erase(0, s.find_first_not_of(t));
	s.erase(s.find_last_not_of(t) + 1);
	return s;
}

void startEM()
{
	size_t i =0,j=0;
	while(i<population_size)
	{
	 string number; 
	 stringstream num; 
	 num << i; 
	 number = num.str();
	 string dirname; 
	 stringstream p_id; 
	 p_id << population_no; 
	 dirname = p_id.str();
	 string fgfileloc =  alarmfgloc + dirname+"/"+"alarm_"+number+".fg";
	 const char* fgfile = &fgfileloc[0];

	 runname = new EMRun(networkname, i, fgfile, gibbsfile); // args are -1.network name 2.factor-graph number 3. evidencefile

	 // 2. Run EM
	 boost::thread threadid(boost::bind(&EMRun::startEM, boost::ref(runname), maxIters)); // args - max iters 
	 layer.push_back(runname); 
	 sleep(1);
	 // 4. Next individual
	 i=i+1;
	}

}

void checkEMforTermination()
{
         string dirname; 
	 stringstream p_id; 
	 p_id << population_no; 
	 dirname = p_id.str();
	string loc =  alarmlearnedfgloc + "learned/"+dirname+"/";
	const char* learnedloc = &loc[0];
	mkdir(learnedloc,0755);
	while (true){
	    //cout<<"in while loop "<<layer.size()<<endl;
	    vector<EMRun*>::iterator it; 
	    for (it=layer.begin(); it != layer.end(); ++it){    
	      //cout<<"layer size "<<layer.size()<<endl;	
	      if((*it)->hasTerminated()) { //if it has terminated, set the run aside	   
		double ll = (*it)->getLL();
		double iters = (*it)->getIters();
		double runid = (*it)->getRun();
		string number; 
		stringstream num; 
		num << runid; 
		number = num.str();
	 	string fglearnedfileloc =  alarmlearnedfgloc + "learned/"+dirname+"/alarm_"+number+".fg";
	    	const char* fglearnedfile = &fglearnedfileloc[0];
		//cout<<"Run number "<<number<<" ll = "<<ll<<" iters = "<<iters<<endl;	
		// 3. Store the learned factor graphs
		InfAlg* inf = (*it)->getInf();
		ofstream learnedstream;
		//cout<<"learned file = "<<fglearnedfile<<endl;
		learnedstream.open(fglearnedfile);
		learnedstream.precision(12);
		learnedstream << inf->fg();  
		learnedstream.flush();
		learnedstream.close();
		delete inf;
		sleep(1);
		//cout<<"Run number "<<number<<" has terminated"<<endl;
		out<<pc<<" "<<pm<<" "<<gibbsfile<<" "<<fglearnedfile<<" "<<runid<<" "<<iters<<" "<<ll<<" "<<endl; 
		layer_finalval.push_back(*it); 
		layer.erase(it);	
		if (layer.size() == 0){break;}
		else { it = layer.begin(); }
	      }
	      else if(((*it)->getIters()) == maxIters){ //we stop the run
		double ll = (*it)->getLL();
		double iters = (*it)->getIters();
		double runid = (*it)->getRun();
		string number; 
		stringstream num; 
		num << runid; 
		number = num.str();
	 	string fglearnedfileloc =  alarmlearnedfgloc + "learned/"+dirname+"/alarm_"+number+".fg";
	    	const char* fglearnedfile = &fglearnedfileloc[0];
		//cout<<"Run number "<<number<<" ll = "<<ll<<" iters = "<<iters<<endl;	
		//cout<<"Run "<<(*it)->getRun()<<" has reached maximum iterations, so stopping the run"<<endl;
		boost::thread thread5(boost::bind(&EMRun::stopEM, boost::ref(*it))); 
	 	// 3. Store the learned factor graphs
		InfAlg *inf = (*it)->getInf();
	    	ofstream learnedstream;
	    	//cout<<"learned file = "<<fglearnedfile<<endl;
	    	learnedstream.open(fglearnedfile);
	    	learnedstream.precision(12);
	    	learnedstream << inf->fg();  
	    	learnedstream.close();
		delete inf;
		sleep(1);		
		//cout<<"Run number "<<number<<" has reached maximum iterations so stopped"<<endl;
		out<<pc<<" "<<pm<<" "<<gibbsfile<<" "<<fglearnedfile<<" "<<runid<<" "<<iters<<" "<<ll<<" "<<endl; 
		layer_finalval.push_back(*it); 
		layer.erase(it);
	//	if (layer.size() == 0){break;}
	//	else { it = layer.begin(); }
	      }
	      //cout<<"Going .."<<endl;     
	 }
	 if (layer.size() == 0){ //cout<<"breaking while"<<endl; 
		break; }
	 else { //cout<<"iterating"<<endl;
		}
	  sleep(1); 
	}
}
void doMutation() // open each child file and apply mutation if required
{	
	string dirname2; 
	stringstream p_id2; 
	p_id2 << population_no+1; 
	dirname2 = p_id2.str();
	string childloc =  alarmlearnedfgloc + dirname2+"/";
	const char* childfgloc = &childloc[0];
	int t=20;
	//cout<<"In Mutation"<<endl;
	//cout<<"declarations done "<<arrval[0]<<endl;
	for( size_t n = 0; n < t; n++ )
	{
		string number1; 
		stringstream num1; 
		num1 << n;//arrval[n]; 
		number1 = num1.str();
		string child =  childloc+ "alarmC_"+number1+".fg";
		string child1 =  childloc+ "alarm_"+number1+".fg";
		const char* childfgfile = &child[0];		 
		const char* childfgfile1 = &child1[0];		 
		//cout<<"child file "<< childfgfile<<endl;	 
		string line1;
		ifstream p1 (childfgfile);  
		ofstream c1 (childfgfile1);  
		getline(p1,line1);
		c1<<line1<<endl;
		int factor =0;
		int no_factors = 0;
		int* factor_names;
		int factor_pos=0;
		int* states_arr;
		int no_states = 1;
		int arr_size =1;
		int factor_states =0;
		int tot_arrays =0;
		int arr_set =0;
		int arr_set_states =0;
		int no_arr_arrset =0;
		int stat =0;
		int p_c = 0;
		double pmut=0;
		while(getline(p1,line1))
		{
			line1 = trim(line1);
			//cout<<p_c<<" "<<pmut<<" "<<pm<<" "<<line1<<endl;
			stringstream ss(line1);			
			if(line1.empty())
			{
			  p_c = 0;
			  stat =0;
			  //cout<<"factor variable "<<factor<<endl;
			  seed();
			  pmut = unifRand(); // generates random a value between 0 and 1 for child1
			  //cout<<"Mutation probability "<<pmut<<endl;		  
			  no_states = 1;
			  arr_size =1;
			  factor++;
			}
			if(pmut>pm) 
			{
			 c1<<line1<<endl;
			 //cout<<"No mutation"<<endl;
		         p_c++;		
			 //continue;
			}
			if(pmut<=pm) //do mutation handling the constraint that the states of the random variable sum to 1.
			{
				//cout<<"Mutation happening "<<endl;
				if(p_c == 0)
				{
				 c1<<line1<<endl;
				}
				if(p_c == 1)
				{
				 ss>>no_factors;
				 //cout<<"no. of factors "<<no_factors<<endl;
				 c1<<no_factors<<endl;
				}
				if(p_c == 2)
				{
				 factor_names = new int[no_factors];
				 std::vector<std::string> fields;
			 	 fields = tokenizeString( line1, true,"  ");		 
				 for( size_t i = 0; i < fields.size(); ++i ) 
				 {
				  stringstream n;
				  n << fields[i]; 
				  string s = n.str();	   
				  if( s.find_first_not_of(" ")!= std::string::npos)	 	
				  {
					c1<<s<<" ";	
					n >> factor_names[i];
					if(factor_names[i] == (factor-1))
					 factor_pos =i;
				  }
			 	 }
				 c1<<endl;
				 //cout<<"factor position "<<factor_pos<<endl;
				}
				if(p_c == 3)
				{
				 states_arr = new int[no_factors];
				 std::vector<std::string> fields1;
			 	 fields1 = tokenizeString( line1, true,"  ");		 
				 for( size_t j = 0; j < fields1.size(); ++j ) 
				 {
				  stringstream n1;
				  n1 << fields1[j]; 
				  string state = n1.str();	   
				  if( state.find_first_not_of(" ")!= std::string::npos)	 	
				  {
					c1<<state<<" ";	
					n1 >> states_arr[j];
					no_states = no_states * states_arr[j];
					if(j < factor_pos)
					 arr_size = arr_size * states_arr[j];
					if(j == factor_pos)
					 {
					  factor_states = states_arr[j];
					  arr_set_states = arr_size*states_arr[j];			  
					 }
				  }
			 	 }
				 c1<<endl;
				 tot_arrays = no_states/arr_size;
				 arr_set = no_states/arr_set_states;
				 no_arr_arrset = factor_states;
				 //cout<<"array size "<<arr_size<<endl;
				 //cout<<no_states<<"\t"<<"no. of states "<<no_states<<"\t"<<"total arrays "<<tot_arrays<<"\t"<<"array set "<<arr_set<<"\t"<<"no. arrays "<<no_arr_arrset<<"\t"<<"factor states "<<factor_states<<endl;
				c1<<no_states<<endl;
				}				
				if(p_c == 5)
				{
				 for(int k=0; k<arr_set; k++)
				  {
					std::vector< double * > Arrays;
				       	for(int l=0; l<no_arr_arrset; l++)
					{
					 Arrays.push_back( new double[arr_size]);
					}
					vector<double*>::iterator it;
					for(int m=0; m<arr_size; m++)
					{
						it=Arrays.begin();				
						double sum=0;
						for(int l=0; l<no_arr_arrset; l++)
						{
						  seed();
						  double* arr = *it;
						  double val;
						  if(l == no_arr_arrset-1)
							val = 1-sum;
						  else
							val = unifRand()/(arr_set+4);				  	
						  arr[m] = val;	
						  sum = sum +val;	
						  ++it;
						}
					}
					vector<double*>::iterator it1;
					it1=Arrays.begin();		
					for(int l=0; l<no_arr_arrset; l++)
					{
						double* arr = *it1;
						for(int m=0; m<arr_size; m++)
						{
						 stringstream v;
						 v << fixed << setprecision(15) << arr[m];
						 c1<<stat<<"\t"<<v.str()<<endl;
						 //cout<<stat<<"\t"<<v.str()<<endl;
						 stat++;
						}
						++it1;
					}

				  }
				}
			}
			p_c++;
		} // end of while loop
		c1.close();
		p1.close();
		remove(childfgfile);	
	} // end of for loop
	//cout<<"Mutation Done"<<endl;
}

void doCrossover()
{
	// compute crossover probability
	 seed();
	 double pcross = unifRand(); // generates random a value between 0 and 1	
	//cout<<"Crossover probability "<<pcross<<endl;
	// 4. Select 2 parents randomly
	const int LOW = 0;
	const int HIGH = 19;
	int t =20; 
	//int t=40;
	// Generate the random variables to select as parents where 't' is the number of variables
	/*Declare variable to hold seconds on clock.*/
	time_t seconds;
	/*Get value from system clock and place in seconds variable.*/
	time(&seconds);
	/*Convert seconds to a unsigned integer.*/
	srand(time(0));
	set<int> myset;
	set<int>::iterator it;
	size_t k =0,p=0;
	arrval = new int[t];
	string dirname; 
	stringstream p_id; 
	p_id << population_no; 
	dirname = p_id.str();
	string dirname2; 
	stringstream p_id2; 
	p_id2 << population_no+1; 
	dirname2 = p_id2.str();
	string childloc =  alarmlearnedfgloc + dirname2+"/";
	const char* childfgloc = &childloc[0];
	mkdir(childfgloc,0755);
	for( size_t n = 0; n < t; n++ )
	{ 
	   int val = rand() % (HIGH - LOW + 1) + LOW;
	   it=myset.find(val);
	   arrval[n] = val;
	   if(it==myset.end()) // if the value is not in the set
	   {
		myset.insert(val);
		p++;
		if(p == 2)
		{
		 //cout <<"Random value is"<<arrval[n]<<" and "<< arrval[n-1]<<endl;
		 string number1; 
		 stringstream num1; 
		 num1 << arrval[n]; 
		 number1 = num1.str();
		 string parent1 =  alarmlearnedfgloc +"learned/"+dirname+"/"+ "alarm_"+number1+".fg";
		 string child1 =  childloc+ "alarmC_"+number1+".fg";
		 const char* parentfgfile1 = &parent1[0];
		 const char* childfgfile1 = &child1[0];
		 string number2; 
		 stringstream num2; 
		 num2 << arrval[n-1]; 
		 number2 = num2.str();
		 string parent2 = alarmlearnedfgloc +"learned/"+dirname+"/"+ "alarm_"+number2+".fg";
		 string child2 =  childloc+ "alarmC_"+number2+".fg";
		 const char* parentfgfile2 = &parent2[0];
		 const char* childfgfile2 = &child2[0];	 
		 //cout<<"parent files are "<< parentfgfile1<< " and "<< parentfgfile2<<endl;
		 //cout<<"child files are "<< childfgfile1<<" and "<<childfgfile2<<endl;
	 
		 string line1,line2;
		 ifstream p1 (parentfgfile1);  ifstream p2 (parentfgfile2);
		 ofstream c1 (childfgfile1);  ofstream c2 (childfgfile2);
		// 5. Do crossover and create two children
		// randomly select a crossover point
		 int cr_pt = (rand() % 36) +1;
		 int c = 0; // count of parameters
	 	 int p_c1 = 0, p_c2 =0; // counter to skip the first four config lines in the cpt of the fg file
		 //cout<<"Crossover point is "<< cr_pt<<endl;
		 double pmut1=0, pmut2 =0;
		 if (p1.is_open() && p2.is_open())
		 {
			 getline(p1,line1); getline(p2,line2);
			 c1<< line1<<endl;
			 c2<< line2<<endl;					

			 while(getline(p1,line1) && getline(p2,line2))
			 {
				//////cout<<line1 << " "<< line2 <<endl;
				line1 = trim(line1); line2 = trim(line2);
				if(line1.empty())
				{
					c++; 	
					seed();
				 	c1<< line1<<endl;
					c2<< line2<<endl;	
					//cout<<"empty line"<<endl;											 
				}
				else
				{
				 	//cout<<"Line number: "<<p_c1<<" "<<p_c2<<endl;
					//cout<<"Crossover point "<<cr_pt<<"our pt "<<c<<"pcross "<<pcross<<"pc "<<pc<<endl;
					if(c <= cr_pt || pcross >= pc) // checking crossover probability
					{				
				 		c1<< line1<<endl;
						c2<< line2<<endl;					
					}
					else
					{
						//cout<<"crossover happening"<<endl;
						c2<< line1<<endl;
						c1<< line2<<endl;											
					}
				}
			 }
		 }
		 p1.close(); p2.close();
	 	 c1.close(); c2.close(); 
		 p=0;	
		//break;
		}

	   }
	   else
	   {
		n=n-1;
		continue;
	   }   
	}
}
int main(int argc, char *argv[]) {
const char* fname =argv[2];
gibbsfile = argv[1]; 
istringstream ss( argv[3] );
ss >> pm;
stringstream ss1( argv[4] );
ss1 >> pc;
stringstream ss2(argv[5]);
alarmfgloc = ss2.str();
alarmlearnedfgloc = ss2.str();

out.open(fname);
time_t timer1, timer2;
time(&timer1);
 //clock_t tStart = clock();
while(population_no<max_gen)
{
	//cout<<"population no"<<population_no<<endl;
	startEM();
	checkEMforTermination();
	doCrossover();
	doMutation();
	population_no=population_no+1;
}
time(&timer2);
double t = difftime(timer2,timer1);//(clock() - tStart)/CLOCKS_PER_SEC;
//double t = (clock() - tStart)/CLOCKS_PER_SEC;
//cout<<"Time taken: "<<t<<"s"<<endl;
out<<"Time taken: "<<t<<"s"<<endl;
out.close();

return 0;
}

